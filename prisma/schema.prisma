// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  rooms           Room[]
  combatSkills    CombatSkill[]
  gatheringSkills GatheringSkill[]
  craftingSkills  CraftingSkill[]
  monsters        Monster[]
  quests          Quest[]
}

model Room {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  region         Region          @relation(fields: [regionId], references: [id])
  regionId       Int
  craftingSkills CraftingSkill[]
  monsters       Monster[]
  npcs           NPC[]
  resources      Resource[]
  questSteps     QuestStep[]
  banks          BankType[]
  portal         Boolean         @default(false)
  obelisk        Boolean         @default(false)
}

model CombatSkill {
  id           Int                      @id @default(autoincrement())
  name         String                   @unique
  region       Region                   @relation(fields: [regionId], references: [id])
  regionId     Int
  requirements CombatSkillRequirement[]
  monsters     Monster[]
}

model CombatSkillRequirement {
  id               Int             @id @default(autoincrement())
  description      String?
  skill            CombatSkill     @relation(fields: [skillId], references: [id])
  skillId          Int
  monsterVariant   MonsterVariant? @relation(fields: [monsterVariantId], references: [id])
  monsterVariantId Int?            @unique
  unlockLevel      Int
}

model Monster {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  skill             CombatSkill      @relation(fields: [skillId], references: [id])
  skillId           Int
  region            Region           @relation(fields: [regionId], references: [id])
  regionId          Int
  rooms             Room[]
  passive           Boolean
  attackElement     AttackElement
  immuneElement     AttackElement
  vulnerableElement AttackElement
  variants          MonsterVariant[]
}

model MonsterVariant {
  id          Int                     @id @default(autoincrement())
  name        String
  monster     Monster                 @relation(fields: [monsterId], references: [id])
  monsterId   Int
  requirement CombatSkillRequirement?
  dropTable   DropTable?
}

model DropTable {
  id                 Int                 @id @default(autoincrement())
  monsterVariant     MonsterVariant      @relation(fields: [monsterVariantId], references: [id])
  monsterVariantId   Int                 @unique
  resourceVariants   ResourceVariant[]
  weaponVariants     WeaponVariant[]
  armorVariants      ArmorVariant[]
  consumableVariants ConsumableVariant[]
  miscItems          MiscItem[]
  currency           Int?
}

model GatheringSkill {
  id           Int                         @id @default(autoincrement())
  name         String                      @unique
  region       Region                      @relation(fields: [regionId], references: [id])
  regionId     Int
  requirements GatheringSkillRequirement[]
  resources    Resource[]
}

model GatheringSkillRequirement {
  id                Int              @id @default(autoincrement())
  description       String?
  skill             GatheringSkill   @relation(fields: [skillId], references: [id])
  skillId           Int
  resourceVariant   ResourceVariant? @relation(fields: [resourceVariantId], references: [id])
  resourceVariantId Int?             @unique
  unlockLevel       Int
}

model Resource {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  skill    GatheringSkill    @relation(fields: [skillId], references: [id])
  skillId  Int
  rooms    Room[]
  passive  Boolean
  variants ResourceVariant[]
}

model ResourceVariant {
  id          Int                        @id @default(autoincrement())
  name        String
  resource    Resource                   @relation(fields: [resourceId], references: [id])
  resourceId  Int
  requirement GatheringSkillRequirement?
  inRecipes   CraftingRecipe[]
  vendors     Vendor[]
  dropTables  DropTable[]
}

model CraftingSkill {
  id           Int                        @id @default(autoincrement())
  name         String                     @unique
  region       Region                     @relation(fields: [regionId], references: [id])
  regionId     Int
  requirements CraftingSkillRequirement[]
  rooms        Room[]
  consumables  Consumable[]
}

model CraftingSkillRequirement {
  id          Int             @id @default(autoincrement())
  description String?
  skill       CraftingSkill   @relation(fields: [skillId], references: [id])
  skillId     Int
  recipe      CraftingRecipe? @relation(fields: [recipeId], references: [id])
  recipeId    Int?            @unique
  unlockLevel Int
}

model CraftingRecipe {
  id          Int                       @id @default(autoincrement())
  name        String                    @unique
  requirement CraftingSkillRequirement?

  inputResourceVariants ResourceVariant[]
  inputItems            MiscItem[]

  outputConsumableVariant   ConsumableVariant? @relation(fields: [outputConsumableVariantId], references: [id])
  outputConsumableVariantId Int?               @unique
  outputWeaponVariant       WeaponVariant?     @relation(fields: [outputWeaponVariantId], references: [id])
  outputWeaponVariantId     Int?               @unique
  outputArmorVariant        ArmorVariant?      @relation(fields: [outputArmorVariantId], references: [id])
  outputArmorVariantId      Int?               @unique
}

model Weapon {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  faction     Faction
  isRanged    Boolean
  isTwoHanded Boolean
  element     AttackElement
  variants    WeaponVariant[]
}

model WeaponVariant {
  id         Int             @id @default(autoincrement())
  name       String
  weapon     Weapon          @relation(fields: [weaponId], references: [id])
  weaponId   Int
  recipe     CraftingRecipe?
  vendors    Vendor[]
  dropTables DropTable[]
}

model Armor {
  id       Int            @id @default(autoincrement())
  name     String         @unique
  faction  Faction
  slot     GearSlot
  variants ArmorVariant[]
}

model ArmorVariant {
  id         Int             @id @default(autoincrement())
  name       String
  armor      Armor           @relation(fields: [armorId], references: [id])
  armorId    Int
  recipe     CraftingRecipe?
  vendors    Vendor[]
  dropTables DropTable[]
}

model Consumable {
  id       Int                 @id @default(autoincrement())
  name     String              @unique
  variants ConsumableVariant[]
  skill    CraftingSkill?      @relation(fields: [skillId], references: [id])
  skillId  Int?
}

model ConsumableVariant {
  id           Int             @id @default(autoincrement())
  name         String
  consumable   Consumable      @relation(fields: [consumableId], references: [id])
  consumableId Int
  recipe       CraftingRecipe?
  vendors      Vendor[]
  dropTables   DropTable[]
}

model MiscItem {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  vendors    Vendor[]
  inRecipes  CraftingRecipe[]
  dropTables DropTable[]
}

model NPC {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  vendor     Vendor?
  questSteps QuestStep[]
  rooms      Room[]
}

model Vendor {
  id                 Int                 @id @default(autoincrement())
  npc                NPC                 @relation(fields: [npcId], references: [id])
  npcId              Int                 @unique
  resourceVariants   ResourceVariant[]
  consumableVariants ConsumableVariant[]
  weaponVariants     WeaponVariant[]
  armorVariants      ArmorVariant[]
  miscItems          MiscItem[]
}

model Quest {
  id       Int         @id @default(autoincrement())
  name     String      @unique
  region   Region      @relation(fields: [regionId], references: [id])
  regionId Int
  steps    QuestStep[]
}

model QuestStep {
  id          Int    @id @default(autoincrement())
  index       Int
  description String
  quest       Quest  @relation(fields: [questId], references: [id])
  questId     Int
  room        Room?  @relation(fields: [roomId], references: [id])
  roomId      Int?
  npc         NPC?   @relation(fields: [npcId], references: [id])
  npcId       Int?
}

enum AttackElement {
  ARBORAE
  CRYONAE
  INFERNAE
  NECROMAE
  TEMPESTAE
  IMPACT
  NONE
}

enum Faction {
  CRYOKNIGHT
  GUARDIAN
  HAMMERMAGE
  NONE
}

enum GearSlot {
  HEAD
  NECK
  TORSO
  BACK
  HANDS
  SHIELD
  LEGS
  FEET
}

enum BankType {
  BONES
  BUILDING
  CAPES
  EXPLOSIVES
  BAIT
  HIDES
  INGREDIENTS
  LEATHERS
  LUMBER
  MONUMENT
  ORE
  REAGENTS
  POTIONS
  QUARTERMASTER
  STONE
  TIMBER
}
